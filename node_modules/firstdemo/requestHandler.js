var querystring=require("querystring");
var fs = require("fs");
var formidable = require("formidable");

function start(request, response){
	
	console.log("request handle 'start' was called");
	var body ='<html>'+
    '<head>'+
    '<meta http-equiv="Content-Type" '+
    'content="text/html; charset=UTF-8" />'+
    '</head>'+
    '<body>'+
    '<form action="/upload" enctype="multipart/form-data" '+
    'method="post">'+
    '<input type="file" name="upload">'+
    '<input type="submit" value="Upload file" />'+
    '</form>'+
    '</body>'+
    '</html>';

	response.writeHead(200,{"Content-Type":"text/html,charset=utf-8"});
	response.write(body);
	response.end();
}

function upload(request, response){
	console.log("request handle 'upload' was called");
	var form =new formidable.IncomingForm();
	 form.parse(request,function(error, fields, files){
		console.log("parsing done");
		fs.renameSync(files.upload.path,"./test.png");
		response.writeHead(200,{"Content-Type":"text/html"});
		response.write("received image:<br/>");
		response.write("<img src='/show' />");
		response.end();
	});
}

function show(request, response){
  console.log("Request handler 'show' was called.");
  fs.readFile("./test.png","binary",function(error, file){
    if(error){
      response.writeHead(500,{"Content-Type":"text/plain"});
      response.write(error +"\n");
      response.end();
    }else{
      response.writeHead(200,{"Content-Type":"image/png"});
      response.write(file,"binary");
      response.end();
    }
  });
}

function read(request,response){
	fs.readFile("./test.txt","utf-8",function(error,data){
		if(error){
			console.error(err);
			response.end();
		}else{
			console.log(data);
			response.end();
		}
	});
	sleep(1000);
	console.log("1");
	sleep(1000);
	sleep(1000);
	console.log("2");
	sleep(1000);
	sleep(1000);
	console.log("3");
	sleep(1000);
	sleep(1000);
	console.log("read over");
}

function sleep(milltime){
	var start=new Date().getTime();
	while((new Date().getTime()-start)<milltime);
}
exports.start=start;
exports.upload=upload;
exports.show = show;
exports.read = read;